<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="373442523"><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,519,599 samples, 0.67%)</title><rect x="0.0000%" y="293" width="0.6747%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2519599"/><text x="0.2500%" y="303.50"></text></g><g><title>cfree (2,540,523 samples, 0.68%)</title><rect x="1.8753%" y="277" width="0.6803%" height="15" fill="rgb(217,0,24)" fg:x="7003095" fg:w="2540523"/><text x="2.1253%" y="287.50"></text></g><g><title>fst::raw::Fst&lt;D&gt;::get (2,567,566 samples, 0.69%)</title><rect x="2.5556%" y="277" width="0.6875%" height="15" fill="rgb(221,193,54)" fg:x="9543618" fg:w="2567566"/><text x="2.8056%" y="287.50"></text></g><g><title>runome::intern::intern_or_clone (2,559,957 samples, 0.69%)</title><rect x="3.2431%" y="277" width="0.6855%" height="15" fill="rgb(248,212,6)" fg:x="12111184" fg:w="2559957"/><text x="3.4931%" y="287.50"></text></g><g><title>runome::lattice::Lattice::add (501,504 samples, 0.13%)</title><rect x="3.9286%" y="277" width="0.1343%" height="15" fill="rgb(208,68,35)" fg:x="14671141" fg:w="501504"/><text x="4.1786%" y="287.50"></text></g><g><title>[unknown] (14,039,664 samples, 3.76%)</title><rect x="0.6747%" y="293" width="3.7595%" height="15" fill="rgb(232,128,0)" fg:x="2519599" fg:w="14039664"/><text x="0.9247%" y="303.50">[unk..</text></g><g><title>runome::lattice::UnknownNode::from_dict_entry (1,386,618 samples, 0.37%)</title><rect x="4.0629%" y="277" width="0.3713%" height="15" fill="rgb(207,160,47)" fg:x="15172645" fg:w="1386618"/><text x="4.3129%" y="287.50"></text></g><g><title>__libc_sigaction (501,504 samples, 0.13%)</title><rect x="4.4342%" y="213" width="0.1343%" height="15" fill="rgb(228,23,34)" fg:x="16559263" fg:w="501504"/><text x="4.6842%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,453,114 samples, 0.66%)</title><rect x="5.8056%" y="117" width="0.6569%" height="15" fill="rgb(218,30,26)" fg:x="21680489" fg:w="2453114"/><text x="6.0556%" y="127.50"></text></g><g><title>[libc.so.6] (4,355,389 samples, 1.17%)</title><rect x="6.7669%" y="101" width="1.1663%" height="15" fill="rgb(220,122,19)" fg:x="25270605" fg:w="4355389"/><text x="7.0169%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (2,469,257 samples, 0.66%)</title><rect x="7.9332%" y="69" width="0.6612%" height="15" fill="rgb(250,228,42)" fg:x="29625994" fg:w="2469257"/><text x="8.1832%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5,048,492 samples, 1.35%)</title><rect x="7.9332%" y="101" width="1.3519%" height="15" fill="rgb(240,193,28)" fg:x="29625994" fg:w="5048492"/><text x="8.1832%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (5,048,492 samples, 1.35%)</title><rect x="7.9332%" y="85" width="1.3519%" height="15" fill="rgb(216,20,37)" fg:x="29625994" fg:w="5048492"/><text x="8.1832%" y="95.50"></text></g><g><title>__rustc::__rust_realloc (2,579,235 samples, 0.69%)</title><rect x="8.5944%" y="69" width="0.6907%" height="15" fill="rgb(206,188,39)" fg:x="32095251" fg:w="2579235"/><text x="8.8444%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (2,564,604 samples, 0.69%)</title><rect x="9.2851%" y="85" width="0.6867%" height="15" fill="rgb(217,207,13)" fg:x="34674486" fg:w="2564604"/><text x="9.5351%" y="95.50"></text></g><g><title>core::str::count::char_count_general_case (2,579,747 samples, 0.69%)</title><rect x="9.9718%" y="85" width="0.6908%" height="15" fill="rgb(231,73,38)" fg:x="37239090" fg:w="2579747"/><text x="10.2218%" y="95.50"></text></g><g><title>&lt;runome::dictionary::dict::RAMDictionary as runome::dictionary::dict::Dictionary&gt;::lookup (42,189,475 samples, 11.30%)</title><rect x="6.4625%" y="117" width="11.2974%" height="15" fill="rgb(225,20,46)" fg:x="24133603" fg:w="42189475"/><text x="6.7125%" y="127.50">&lt;runome::dictiona..</text></g><g><title>runome::dictionary::dict::Matcher::run (31,648,592 samples, 8.47%)</title><rect x="9.2851%" y="101" width="8.4748%" height="15" fill="rgb(210,31,41)" fg:x="34674486" fg:w="31648592"/><text x="9.5351%" y="111.50">runome::dict..</text></g><g><title>fst::raw::Fst&lt;D&gt;::get (26,504,241 samples, 7.10%)</title><rect x="10.6626%" y="85" width="7.0973%" height="15" fill="rgb(221,200,47)" fg:x="39818837" fg:w="26504241"/><text x="10.9126%" y="95.50">fst::raw::..</text></g><g><title>fst::raw::node::Node::new (8,420,693 samples, 2.25%)</title><rect x="15.5050%" y="69" width="2.2549%" height="15" fill="rgb(226,26,5)" fg:x="57902385" fg:w="8420693"/><text x="15.7550%" y="79.50">f..</text></g><g><title>[libc.so.6] (1,999,500 samples, 0.54%)</title><rect x="17.7599%" y="117" width="0.5354%" height="15" fill="rgb(249,33,26)" fg:x="66323078" fg:w="1999500"/><text x="18.0099%" y="127.50"></text></g><g><title>cfree (19,102,834 samples, 5.12%)</title><rect x="18.2953%" y="117" width="5.1153%" height="15" fill="rgb(235,183,28)" fg:x="68322578" fg:w="19102834"/><text x="18.5453%" y="127.50">cfree</text></g><g><title>[libc.so.6] (19,102,834 samples, 5.12%)</title><rect x="18.2953%" y="101" width="5.1153%" height="15" fill="rgb(221,5,38)" fg:x="68322578" fg:w="19102834"/><text x="18.5453%" y="111.50">[libc...</text></g><g><title>[libc.so.6] (19,102,834 samples, 5.12%)</title><rect x="18.2953%" y="85" width="5.1153%" height="15" fill="rgb(247,18,42)" fg:x="68322578" fg:w="19102834"/><text x="18.5453%" y="95.50">[libc...</text></g><g><title>[libc.so.6] (4,833,258 samples, 1.29%)</title><rect x="22.1164%" y="69" width="1.2942%" height="15" fill="rgb(241,131,45)" fg:x="82592154" fg:w="4833258"/><text x="22.3664%" y="79.50"></text></g><g><title>cfree (13,587,529 samples, 3.64%)</title><rect x="23.4107%" y="69" width="3.6385%" height="15" fill="rgb(249,31,29)" fg:x="87425412" fg:w="13587529"/><text x="23.6607%" y="79.50">cfree</text></g><g><title>[libc.so.6] (8,211,856 samples, 2.20%)</title><rect x="24.8502%" y="53" width="2.1990%" height="15" fill="rgb(225,111,53)" fg:x="92801085" fg:w="8211856"/><text x="25.1002%" y="63.50">[..</text></g><g><title>[libc.so.6] (2,371,764 samples, 0.64%)</title><rect x="26.4140%" y="37" width="0.6351%" height="15" fill="rgb(238,160,17)" fg:x="98641177" fg:w="2371764"/><text x="26.6640%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34,513,471 samples, 9.24%)</title><rect x="23.4107%" y="85" width="9.2420%" height="15" fill="rgb(214,148,48)" fg:x="87425412" fg:w="34513471"/><text x="23.6607%" y="95.50">&lt;alloc::vec::..</text></g><g><title>core::ptr::drop_in_place&lt;runome::lattice::UnknownNode&gt; (20,925,942 samples, 5.60%)</title><rect x="27.0491%" y="69" width="5.6035%" height="15" fill="rgb(232,36,49)" fg:x="101012941" fg:w="20925942"/><text x="27.2991%" y="79.50">core::p..</text></g><g><title>cfree (20,925,942 samples, 5.60%)</title><rect x="27.0491%" y="53" width="5.6035%" height="15" fill="rgb(209,103,24)" fg:x="101012941" fg:w="20925942"/><text x="27.2991%" y="63.50">cfree</text></g><g><title>[libc.so.6] (3,921,419 samples, 1.05%)</title><rect x="31.6026%" y="37" width="1.0501%" height="15" fill="rgb(229,88,8)" fg:x="118017464" fg:w="3921419"/><text x="31.8526%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36,858,468 samples, 9.87%)</title><rect x="23.4107%" y="101" width="9.8699%" height="15" fill="rgb(213,181,19)" fg:x="87425412" fg:w="36858468"/><text x="23.6607%" y="111.50">&lt;alloc::vec::V..</text></g><g><title>cfree (2,344,997 samples, 0.63%)</title><rect x="32.6527%" y="85" width="0.6279%" height="15" fill="rgb(254,191,54)" fg:x="121938883" fg:w="2344997"/><text x="32.9027%" y="95.50"></text></g><g><title>[libc.so.6] (2,344,997 samples, 0.63%)</title><rect x="32.6527%" y="69" width="0.6279%" height="15" fill="rgb(241,83,37)" fg:x="121938883" fg:w="2344997"/><text x="32.9027%" y="79.50"></text></g><g><title>[libc.so.6] (2,344,997 samples, 0.63%)</title><rect x="32.6527%" y="53" width="0.6279%" height="15" fill="rgb(233,36,39)" fg:x="121938883" fg:w="2344997"/><text x="32.9027%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;runome::lattice::Lattice&gt; (43,959,501 samples, 11.77%)</title><rect x="23.4107%" y="117" width="11.7714%" height="15" fill="rgb(226,3,54)" fg:x="87425412" fg:w="43959501"/><text x="23.6607%" y="127.50">core::ptr::drop_i..</text></g><g><title>cfree (7,101,033 samples, 1.90%)</title><rect x="33.2806%" y="101" width="1.9015%" height="15" fill="rgb(245,192,40)" fg:x="124283880" fg:w="7101033"/><text x="33.5306%" y="111.50">c..</text></g><g><title>[libc.so.6] (7,101,033 samples, 1.90%)</title><rect x="33.2806%" y="85" width="1.9015%" height="15" fill="rgb(238,167,29)" fg:x="124283880" fg:w="7101033"/><text x="33.5306%" y="95.50">[..</text></g><g><title>[libc.so.6] (7,101,033 samples, 1.90%)</title><rect x="33.2806%" y="69" width="1.9015%" height="15" fill="rgb(232,182,51)" fg:x="124283880" fg:w="7101033"/><text x="33.5306%" y="79.50">[..</text></g><g><title>[libc.so.6] (4,735,865 samples, 1.27%)</title><rect x="33.9139%" y="53" width="1.2682%" height="15" fill="rgb(231,60,39)" fg:x="126649048" fg:w="4735865"/><text x="34.1639%" y="63.50"></text></g><g><title>malloc (987,305 samples, 0.26%)</title><rect x="35.1821%" y="117" width="0.2644%" height="15" fill="rgb(208,69,12)" fg:x="131384913" fg:w="987305"/><text x="35.4321%" y="127.50"></text></g><g><title>runome::dictionary::system_dict::SystemDictionary::get_char_categories_result (2,108,756 samples, 0.56%)</title><rect x="35.4465%" y="117" width="0.5647%" height="15" fill="rgb(235,93,37)" fg:x="132372218" fg:w="2108756"/><text x="35.6965%" y="127.50"></text></g><g><title>runome::dictionary::dict_resource::DictionaryResource::get_char_categories (2,108,756 samples, 0.56%)</title><rect x="35.4465%" y="101" width="0.5647%" height="15" fill="rgb(213,116,39)" fg:x="132372218" fg:w="2108756"/><text x="35.6965%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,108,756 samples, 0.56%)</title><rect x="35.4465%" y="85" width="0.5647%" height="15" fill="rgb(222,207,29)" fg:x="132372218" fg:w="2108756"/><text x="35.6965%" y="95.50"></text></g><g><title>&lt;runome::dictionary::system_dict::SystemDictionary as runome::dictionary::dict::Dictionary&gt;::get_trans_cost (9,210,364 samples, 2.47%)</title><rect x="75.5235%" y="101" width="2.4663%" height="15" fill="rgb(206,96,30)" fg:x="282036993" fg:w="9210364"/><text x="75.7735%" y="111.50">&lt;r..</text></g><g><title>&lt;runome::lattice::UnknownNode as runome::lattice::LatticeNode&gt;::cost (4,682,267 samples, 1.25%)</title><rect x="77.9899%" y="101" width="1.2538%" height="15" fill="rgb(218,138,4)" fg:x="291247357" fg:w="4682267"/><text x="78.2399%" y="111.50"></text></g><g><title>[libc.so.6] (2,459,131 samples, 0.66%)</title><rect x="79.2437%" y="101" width="0.6585%" height="15" fill="rgb(250,191,14)" fg:x="295929624" fg:w="2459131"/><text x="79.4937%" y="111.50"></text></g><g><title>runome::lattice::Lattice::add (166,267,270 samples, 44.52%)</title><rect x="36.0112%" y="117" width="44.5229%" height="15" fill="rgb(239,60,40)" fg:x="134480974" fg:w="166267270"/><text x="36.2612%" y="127.50">runome::lattice::Lattice::add</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,359,489 samples, 0.63%)</title><rect x="79.9022%" y="101" width="0.6318%" height="15" fill="rgb(206,27,48)" fg:x="298388755" fg:w="2359489"/><text x="80.1522%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,359,489 samples, 0.63%)</title><rect x="79.9022%" y="85" width="0.6318%" height="15" fill="rgb(225,35,8)" fg:x="298388755" fg:w="2359489"/><text x="80.1522%" y="95.50"></text></g><g><title>malloc (2,359,489 samples, 0.63%)</title><rect x="79.9022%" y="69" width="0.6318%" height="15" fill="rgb(250,213,24)" fg:x="298388755" fg:w="2359489"/><text x="80.1522%" y="79.50"></text></g><g><title>[libc.so.6] (4,298,887 samples, 1.15%)</title><rect x="82.5506%" y="69" width="1.1512%" height="15" fill="rgb(247,123,22)" fg:x="308279215" fg:w="4298887"/><text x="82.8006%" y="79.50"></text></g><g><title>__rustc::__rdl_alloc (2,574,475 samples, 0.69%)</title><rect x="83.7018%" y="69" width="0.6894%" height="15" fill="rgb(231,138,38)" fg:x="312578102" fg:w="2574475"/><text x="83.9518%" y="79.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (46,487,633 samples, 12.45%)</title><rect x="81.9300%" y="85" width="12.4484%" height="15" fill="rgb(231,145,46)" fg:x="305961457" fg:w="46487633"/><text x="82.1800%" y="95.50">&lt;T as alloc::slice:..</text></g><g><title>malloc (37,296,513 samples, 9.99%)</title><rect x="84.3912%" y="69" width="9.9872%" height="15" fill="rgb(251,118,11)" fg:x="315152577" fg:w="37296513"/><text x="84.6412%" y="79.50">malloc</text></g><g><title>[libc.so.6] (33,952,981 samples, 9.09%)</title><rect x="85.2865%" y="53" width="9.0919%" height="15" fill="rgb(217,147,25)" fg:x="318496109" fg:w="33952981"/><text x="85.5365%" y="63.50">[libc.so.6]</text></g><g><title>runome::lattice::UnknownNode::from_dict_entry (54,124,255 samples, 14.49%)</title><rect x="80.5340%" y="117" width="14.4933%" height="15" fill="rgb(247,81,37)" fg:x="300748244" fg:w="54124255"/><text x="80.7840%" y="127.50">runome::lattice::Unkno..</text></g><g><title>runome::intern::intern_or_clone (51,783,712 samples, 13.87%)</title><rect x="81.1608%" y="101" width="13.8666%" height="15" fill="rgb(209,12,38)" fg:x="303088787" fg:w="51783712"/><text x="81.4108%" y="111.50">runome::intern::inter..</text></g><g><title>[libc.so.6] (2,423,409 samples, 0.65%)</title><rect x="94.3784%" y="85" width="0.6489%" height="15" fill="rgb(227,1,9)" fg:x="352449090" fg:w="2423409"/><text x="94.6284%" y="95.50"></text></g><g><title>&lt;runome::tokenizer::TextChunkIterator as core::iter::traits::iterator::Iterator&gt;::next (340,391,007 samples, 91.15%)</title><rect x="4.5685%" y="133" width="91.1495%" height="15" fill="rgb(248,47,43)" fg:x="17060767" fg:w="340391007"/><text x="4.8185%" y="143.50">&lt;runome::tokenizer::TextChunkIterator as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>runome::tokenizer::Token::from_dict_node (2,579,275 samples, 0.69%)</title><rect x="95.0273%" y="117" width="0.6907%" height="15" fill="rgb(221,10,30)" fg:x="354872499" fg:w="2579275"/><text x="95.2773%" y="127.50"></text></g><g><title>_start (352,680,764 samples, 94.44%)</title><rect x="4.4342%" y="293" width="94.4404%" height="15" fill="rgb(210,229,1)" fg:x="16559263" fg:w="352680764"/><text x="4.6842%" y="303.50">_start</text></g><g><title>__libc_start_main (352,680,764 samples, 94.44%)</title><rect x="4.4342%" y="277" width="94.4404%" height="15" fill="rgb(222,148,37)" fg:x="16559263" fg:w="352680764"/><text x="4.6842%" y="287.50">__libc_start_main</text></g><g><title>[libc.so.6] (352,680,764 samples, 94.44%)</title><rect x="4.4342%" y="261" width="94.4404%" height="15" fill="rgb(234,67,33)" fg:x="16559263" fg:w="352680764"/><text x="4.6842%" y="271.50">[libc.so.6]</text></g><g><title>main (352,680,764 samples, 94.44%)</title><rect x="4.4342%" y="245" width="94.4404%" height="15" fill="rgb(247,98,35)" fg:x="16559263" fg:w="352680764"/><text x="4.6842%" y="255.50">main</text></g><g><title>std::rt::lang_start_internal (352,680,764 samples, 94.44%)</title><rect x="4.4342%" y="229" width="94.4404%" height="15" fill="rgb(247,138,52)" fg:x="16559263" fg:w="352680764"/><text x="4.6842%" y="239.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (352,179,260 samples, 94.31%)</title><rect x="4.5685%" y="213" width="94.3061%" height="15" fill="rgb(213,79,30)" fg:x="17060767" fg:w="352179260"/><text x="4.8185%" y="223.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (352,179,260 samples, 94.31%)</title><rect x="4.5685%" y="197" width="94.3061%" height="15" fill="rgb(246,177,23)" fg:x="17060767" fg:w="352179260"/><text x="4.8185%" y="207.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokenizer_bench::main (352,179,260 samples, 94.31%)</title><rect x="4.5685%" y="181" width="94.3061%" height="15" fill="rgb(230,62,27)" fg:x="17060767" fg:w="352179260"/><text x="4.8185%" y="191.50">tokenizer_bench::main</text></g><g><title>core::iter::adapters::try_process (352,179,260 samples, 94.31%)</title><rect x="4.5685%" y="165" width="94.3061%" height="15" fill="rgb(216,154,8)" fg:x="17060767" fg:w="352179260"/><text x="4.8185%" y="175.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (352,179,260 samples, 94.31%)</title><rect x="4.5685%" y="149" width="94.3061%" height="15" fill="rgb(244,35,45)" fg:x="17060767" fg:w="352179260"/><text x="4.8185%" y="159.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (11,788,253 samples, 3.16%)</title><rect x="95.7180%" y="133" width="3.1566%" height="15" fill="rgb(251,115,12)" fg:x="357451774" fg:w="11788253"/><text x="95.9680%" y="143.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (11,788,253 samples, 3.16%)</title><rect x="95.7180%" y="117" width="3.1566%" height="15" fill="rgb(240,54,50)" fg:x="357451774" fg:w="11788253"/><text x="95.9680%" y="127.50">all..</text></g><g><title>realloc (11,788,253 samples, 3.16%)</title><rect x="95.7180%" y="101" width="3.1566%" height="15" fill="rgb(233,84,52)" fg:x="357451774" fg:w="11788253"/><text x="95.9680%" y="111.50">rea..</text></g><g><title>[libc.so.6] (11,788,253 samples, 3.16%)</title><rect x="95.7180%" y="85" width="3.1566%" height="15" fill="rgb(207,117,47)" fg:x="357451774" fg:w="11788253"/><text x="95.9680%" y="95.50">[li..</text></g><g><title>[libc.so.6] (11,788,253 samples, 3.16%)</title><rect x="95.7180%" y="69" width="3.1566%" height="15" fill="rgb(249,43,39)" fg:x="357451774" fg:w="11788253"/><text x="95.9680%" y="79.50">[li..</text></g><g><title>[libc.so.6] (11,788,253 samples, 3.16%)</title><rect x="95.7180%" y="53" width="3.1566%" height="15" fill="rgb(209,38,44)" fg:x="357451774" fg:w="11788253"/><text x="95.9680%" y="63.50">[li..</text></g><g><title>[libc.so.6] (6,284,483 samples, 1.68%)</title><rect x="97.1918%" y="37" width="1.6829%" height="15" fill="rgb(236,212,23)" fg:x="362955544" fg:w="6284483"/><text x="97.4418%" y="47.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,183,400 samples, 0.58%)</title><rect x="98.8747%" y="293" width="0.5847%" height="15" fill="rgb(242,79,21)" fg:x="369240027" fg:w="2183400"/><text x="99.1247%" y="303.50"></text></g><g><title>all (373,442,523 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="373442523"/><text x="0.2500%" y="335.50"></text></g><g><title>tokenizer_bench (373,442,523 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="373442523"/><text x="0.2500%" y="319.50">tokenizer_bench</text></g><g><title>fst::raw::node::Node::new (2,019,096 samples, 0.54%)</title><rect x="99.4593%" y="293" width="0.5407%" height="15" fill="rgb(211,81,21)" fg:x="371423427" fg:w="2019096"/><text x="99.7093%" y="303.50"></text></g></svg></svg>